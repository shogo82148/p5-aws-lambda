AWSTemplateFormatVersion: 2010-09-09
Description: ECR Repository for Perl AWS Lambda runtime

Resources:
  Repository:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::ECR::PublicRepository
    Properties:
      RepositoryName: p5-aws-lambda
      RepositoryCatalogData:
        OperatingSystems: [ Linux ]
        Architectures: [ x86-64 ]
        RepositoryDescription: Perl runtime for AWS Lambda
        AboutText: |
          This is Perl runtime for AWS Lambda based on [lambda/provided](https://gallery.ecr.aws/lambda/provided).
          It contains pre-built [perl](https://www.perl.org/) binary and [AWS::Lambda](https://metacpan.org/pod/AWS::Lambda)
          that is one of Lambda Runtime Interface Client for Perl.

          # IMAGE TAGS

          The following tags are based on Amazon Linux 2.

          - `base-<version>.al2`
            - The image based on [lambda/provided](https://gallery.ecr.aws/lambda/provided) Amazon Linux 2
            - You can customize this and deploy your images to AWS Lambda
          - `base-<version>-paws.al2`
            - The image based on [lambda/provided](https://gallery.ecr.aws/lambda/provided) Amazon Linux 2
            - It also contains [Paws](https://metacpan.org/pod/Paws) that is a Perl SDK for AWS APIs
          - `build-<version>.al2`
            - The image based on [lambci/lambda](https://hub.docker.com/r/lambci/lambda/) Amazon Linux 2
            - You can build CPAN modules on your local machines
          - `build-<version>-paws.al2`
            - The image based on [lambci/lambda](https://hub.docker.com/r/lambci/lambda/) Amazon Linux 2
            - It also contains [Paws](https://metacpan.org/pod/Paws) that is a Perl SDK for AWS APIs
          - `<version>.al2`
            - The image based on [lambci/lambda](https://hub.docker.com/r/lambci/lambda/) Amazon Linux 2
            - You can run your Lambda functions on your local machines
          - `<version>-paws.al2`
            - The image based on [lambci/lambda](https://hub.docker.com/r/lambci/lambda/) Amazon Linux 2
            - It also contains [Paws](https://metacpan.org/pod/Paws) that is a Perl SDK for AWS APIs

          These are based on Amazon Linux.

          - `base-<version>`
          - `base-<version>-paws`
          - `build-<version>`
          - `build-<version>-paws`
          - `<version>`
          - `<version>-paws`

          # SEE ALSO

          - [AWS::Lambda on metacpan](https://metacpan.org/pod/AWS::Lambda)
          - [shogo82148/p5-aws-lambda on GitHub](https://github.com/shogo82148/p5-aws-lambda)
          - [Paws](https://metacpan.org/pod/Paws)
          - [lambda/provided](https://gallery.ecr.aws/lambda/provided)
          - [lambci/lambda](https://hub.docker.com/r/lambci/lambda/)

        UsageText: |
          # Build and Deploy Docker Images

          Here is an example of Dockerfile.

              FROM shogo82148/p5-aws-lambda:base-5.32.al2
              # or if you want to use ECR Public.
              # FROM public.ecr.aws/shogo82148/p5-aws-lambda:base-5.32.al2
              COPY handler.pl /var/task/
              CMD [ "handler.handle" ]

          Build the hello-perl container image locally:

              $ docker build -t hello-perl .

          To check if this is working, start the container image locally using the Lambda Runtime Interface Emulator:

              $ docker run -p 9000:8080 hello-perl:latest

          Now, you can test a function invocation with cURL.

              $ curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}'

          To upload the container image, you need to create a new ECR repository in your account and tag the local image to push it to ECR.

              $ aws ecr create-repository --repository-name hello-perl --image-scanning-configuration scanOnPush=true
              $ docker tag hello-perl:latest 123412341234.dkr.ecr.sa-east-1.amazonaws.com/hello-perl:latest
              $ aws ecr get-login-password | docker login --username AWS --password-stdin 123412341234.dkr.ecr.sa-east-1.amazonaws.com
              $ docker push 123412341234.dkr.ecr.sa-east-1.amazonaws.com/hello-perl:latest

          Finally, create new function using awscli.

              $ aws --region "$REGION" --profile "$PROFILE" lambda create-function \
                  --function-name "hello-perl" \
                  --code ImageUri=123412341234.dkr.ecr.sa-east-1.amazonaws.com/hello-perl:latest \
                  --handler "handler.handle" \
                  --runtime provided.al2 \
                  --role arn:aws:iam::xxxxxxxxxxxx:role/service-role/lambda-custom-runtime-perl-role

          # Use lambci/lambda based images

              # Install the dependency.
              docker run --rm -v $(PWD):/var/task shogo82148/p5-aws-lambda:build-5.32.al2 \
                  cpanm --notest --local-lib extlocal --no-man-pages --installdeps .

              # run an event.
              docker run --rm -v $(PWD):/var/task shogo82148/p5-aws-lambda:5.32.al2 \
                  handler.handle '{"some":"event"}'

  StateBucket:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: shogo82148-lambda-perl-runtime-state
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DeploymentUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: Deployment
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr-public:*"
                Resource:
                  - !Sub "arn:aws:ecr-public::${AWS::AccountId}:repository/p5-aws-lambda"
              - Effect: Allow
                Action:
                  - "ecr-public:GetAuthorizationToken"
                  - "sts:GetServiceBearerToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !GetAtt StateBucket.Arn
                  - !Sub "${StateBucket.Arn}/*"
  DeploymentAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref DeploymentUser

Outputs:
  DeploymentAccessKey:
    Value: !Ref DeploymentAccessKey
    Description: deployment access key
  DeploymentSecretKey:
    Value: !GetAtt DeploymentAccessKey.SecretAccessKey
    Description: deployment secret access key
